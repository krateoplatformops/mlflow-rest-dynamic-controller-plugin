basePath: /
definitions:
  experiment.Experiment:
    properties:
      artifact_location:
        type: string
      creation_time: {}
      experiment_id:
        type: string
      last_update_time: {}
      lifecycle_stage:
        type: string
      name:
        type: string
      tags:
        items:
          $ref: '#/definitions/experiment.ExperimentTag'
        type: array
    type: object
  experiment.ExperimentTag:
    properties:
      key:
        type: string
      value:
        type: string
    type: object
  run.DatasetInput:
    properties:
      dataset_id:
        type: string
      dataset_name:
        type: string
    type: object
  run.Metric:
    properties:
      key:
        type: string
      timestamp:
        type: integer
      value:
        type: number
    type: object
  run.Param:
    properties:
      key:
        type: string
      value:
        type: string
    type: object
  run.Run:
    properties:
      artifact_uri:
        type: string
      data:
        $ref: '#/definitions/run.RunData'
      end_time: {}
      experiment_id:
        type: string
      info:
        $ref: '#/definitions/run.RunInfo'
      inputs:
        $ref: '#/definitions/run.RunInputs'
      lifecycle_stage:
        type: string
      run_id:
        type: string
      run_name:
        type: string
      run_uuid:
        type: string
      start_time: {}
      status:
        type: string
      user_id:
        type: string
    type: object
  run.RunData:
    properties:
      metrics:
        items:
          $ref: '#/definitions/run.Metric'
        type: array
      params:
        items:
          $ref: '#/definitions/run.Param'
        type: array
      tags:
        items:
          $ref: '#/definitions/run.RunTag'
        type: array
    type: object
  run.RunInfo:
    properties:
      artifact_uri:
        type: string
      end_time:
        type: integer
      experiment_id:
        type: string
      lifecycle_stage:
        type: string
      run_id:
        type: string
      run_name:
        type: string
      run_uuid:
        type: string
      start_time:
        type: integer
      status:
        type: string
      user_id:
        type: string
    type: object
  run.RunInputs:
    properties:
      dataset_inputs:
        items:
          $ref: '#/definitions/run.DatasetInput'
        type: array
    type: object
  run.RunTag:
    properties:
      key:
        type: string
      value:
        type: string
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
host: localhost:8080
info:
  contact:
    email: contact@krateoplatformops.io
    name: Krateo Support
    url: https://krateo.io
  description: Simple wrapper around MLFlow API for Krateo Operator Generator (KOG)
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: MLFlow Plugin API for Krateo Operator Generator (KOG)
  version: "1.0"
paths:
  /2.0/mlflow/experiments/get:
    get:
      description: Get metadata for an experiment
      operationId: get-experiment
      parameters:
      - description: ID of the associated experiment
        in: query
        name: experiment_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/experiment.Experiment'
      summary: Get metadata for an experiment
  /2.0/mlflow/model-versions/create:
    post:
      consumes:
      - application/json
      description: Create a new model version
      operationId: create-model-version
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Create a new model version
  /2.0/mlflow/model-versions/get:
    get:
      description: Get metadata for a model version
      operationId: get-model-version
      parameters:
      - description: Name of the registered model
        in: query
        name: name
        required: true
        type: string
      - description: Model version number
        in: query
        name: version
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Get metadata for a model version
  /2.0/mlflow/registered-models/get:
    get:
      description: Get metadata for a registered model
      operationId: get-registered-model
      parameters:
      - description: Registered model unique name identifier
        in: query
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Get metadata for a registered model
  /2.0/mlflow/runs/create:
    post:
      consumes:
      - application/json
      description: Create a new run
      operationId: create-run
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/run.Run'
      summary: Create a new run
  /2.0/mlflow/runs/get:
    get:
      description: Get metadata for a run
      operationId: get-run
      parameters:
      - description: ID of the associated run
        in: query
        name: run_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/run.Run'
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Get metadata for a run
schemes:
- http
swagger: "2.0"
